rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate text data structure
    function isValidTextData() {
      return request.resource.data.keys().hasAll(['content', 'type', 'characterCount', 'createdAt'])
        && request.resource.data.content is string
        && request.resource.data.type is string
        && request.resource.data.characterCount is number;
    }
    
    // Helper function to validate content length (500 characters max)
    function isValidContentLength() {
      return request.resource.data.content.size() <= 500;
    }
    
    // Helper function to validate text type
    function isValidTextType() {
      return request.resource.data.type in ['reference', 'edit'];
    }
    
    // Users collection - top level access control
    match /users/{userId} {
      // Users can only read/write their own user document
      allow read, write: if isOwner(userId);
      
      // Profile subcollection
      match /profile/{document=**} {
        allow read, write: if isOwner(userId);
      }
      
      // SavedTexts subcollection - detailed validation
      match /savedTexts/{textId} {
        // Read: User must be authenticated and own the document
        allow read: if isOwner(userId);
        
        // Create: Validate structure, content length, and type
        allow create: if isOwner(userId)
                      && isValidTextData()
                      && isValidContentLength()
                      && isValidTextType();
        
        // Update: Validate content length (allow partial updates)
        allow update: if isOwner(userId)
                      && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['content']) 
                          || isValidContentLength())
                      && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['type']) 
                          || isValidTextType());
        
        // Delete: User must own the document
        allow delete: if isOwner(userId);
      }
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
